// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package model

import (
	"fmt"
	"strings"
)

const (
	// ConfigKeyFishpi is a ConfigKey of type fishpi.
	// 摸鱼派
	ConfigKeyFishpi ConfigKey = "fishpi"
)

var ErrInvalidConfigKey = fmt.Errorf("not a valid ConfigKey, try [%s]", strings.Join(_ConfigKeyNames, ", "))

var _ConfigKeyNames = []string{
	string(ConfigKeyFishpi),
}

// ConfigKeyNames returns a list of possible string values of ConfigKey.
func ConfigKeyNames() []string {
	tmp := make([]string, len(_ConfigKeyNames))
	copy(tmp, _ConfigKeyNames)
	return tmp
}

// ConfigKeyValues returns a list of the values for ConfigKey
func ConfigKeyValues() []ConfigKey {
	return []ConfigKey{
		ConfigKeyFishpi,
	}
}

// String implements the Stringer interface.
func (x ConfigKey) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ConfigKey) IsValid() bool {
	_, err := ParseConfigKey(string(x))
	return err == nil
}

var _ConfigKeyValue = map[string]ConfigKey{
	"fishpi": ConfigKeyFishpi,
}

// ParseConfigKey attempts to convert a string to a ConfigKey.
func ParseConfigKey(name string) (ConfigKey, error) {
	if x, ok := _ConfigKeyValue[name]; ok {
		return x, nil
	}
	return ConfigKey(""), fmt.Errorf("%s is %w", name, ErrInvalidConfigKey)
}

// MustParseConfigKey converts a string to a ConfigKey, and panics if is not valid.
func MustParseConfigKey(name string) ConfigKey {
	val, err := ParseConfigKey(name)
	if err != nil {
		panic(err)
	}
	return val
}

func (x ConfigKey) Ptr() *ConfigKey {
	return &x
}

// MarshalText implements the text marshaller method.
func (x ConfigKey) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ConfigKey) UnmarshalText(text []byte) error {
	tmp, err := ParseConfigKey(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// PointStatusPending is a PointStatus of type pending.
	// 待发放
	PointStatusPending PointStatus = "pending"
	// PointStatusSuccess is a PointStatus of type success.
	// 发放成功
	PointStatusSuccess PointStatus = "success"
	// PointStatusFailed is a PointStatus of type failed.
	// 发放失败
	PointStatusFailed PointStatus = "failed"
)

var ErrInvalidPointStatus = fmt.Errorf("not a valid PointStatus, try [%s]", strings.Join(_PointStatusNames, ", "))

var _PointStatusNames = []string{
	string(PointStatusPending),
	string(PointStatusSuccess),
	string(PointStatusFailed),
}

// PointStatusNames returns a list of possible string values of PointStatus.
func PointStatusNames() []string {
	tmp := make([]string, len(_PointStatusNames))
	copy(tmp, _PointStatusNames)
	return tmp
}

// PointStatusValues returns a list of the values for PointStatus
func PointStatusValues() []PointStatus {
	return []PointStatus{
		PointStatusPending,
		PointStatusSuccess,
		PointStatusFailed,
	}
}

// String implements the Stringer interface.
func (x PointStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x PointStatus) IsValid() bool {
	_, err := ParsePointStatus(string(x))
	return err == nil
}

var _PointStatusValue = map[string]PointStatus{
	"pending": PointStatusPending,
	"success": PointStatusSuccess,
	"failed":  PointStatusFailed,
}

// ParsePointStatus attempts to convert a string to a PointStatus.
func ParsePointStatus(name string) (PointStatus, error) {
	if x, ok := _PointStatusValue[name]; ok {
		return x, nil
	}
	return PointStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidPointStatus)
}

// MustParsePointStatus converts a string to a PointStatus, and panics if is not valid.
func MustParsePointStatus(name string) PointStatus {
	val, err := ParsePointStatus(name)
	if err != nil {
		panic(err)
	}
	return val
}

func (x PointStatus) Ptr() *PointStatus {
	return &x
}

// MarshalText implements the text marshaller method.
func (x PointStatus) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *PointStatus) UnmarshalText(text []byte) error {
	tmp, err := ParsePointStatus(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
